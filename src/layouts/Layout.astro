---
import "../styles/global.css";
import "../styles/dots.css";
import "../styles/transitions.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import ClientRouter from "astro/components/ClientRouter.astro";
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>Jhon Rivero</title>
		<ClientRouter />
	</head>
	<body class="bg-[#0D121E] text-[#F5F5F5] space-y-20 sm:space-y-40">
		<Header />
		<div class="doc-stars doc-stars--sm"></div>
		<div class="doc-stars doc-stars--md"></div>
		<div class="doc-stars doc-stars--lg"></div>
		<main class="max-w-screen-2xl mx-auto p-5 md:p-10">
			<slot />
		</main>
		<Footer />
	</body>
</html>

<style>
	html,
	body {
		font-family: "Basis Grotesque Pro", "sans-serif";
		margin: 0;
		width: 100%;
		height: 100%;
		scroll-behavior: smooth;
	}
</style>

<script is:inline>
	const animatedSections = document.querySelectorAll(
		".fade-in, .slide-left, .slide-right"
	);

	const observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add("show");
				}
			});
		},
		{ threshold: 0.2 }
	);

	animatedSections.forEach((section) => observer.observe(section));

	if (typeof window !== "undefined") {
		requestIdleCallback(() => {
			const sections = document.querySelectorAll("section[id]");

			const handleScroll = () => {
				let currentSection = null;
				let minDistance = Infinity;
				const viewportCenter = window.innerHeight / 2;

				sections.forEach((section) => {
					const rect = section.getBoundingClientRect();
					const sectionCenter = rect.top + rect.height / 2;
					const distance = Math.abs(viewportCenter - sectionCenter);

					if (distance < minDistance) {
						minDistance = distance;
						currentSection = section;
					}
				});

				if (currentSection) {
					const newUrl = `#${currentSection.id}`;
					if (location.hash !== newUrl) {
						history.replaceState(null, "", newUrl);
					}

					document.querySelectorAll("nav a[data-section]").forEach((link) => {
						link.classList.toggle("underline", link.dataset.section === currentSection.id);
					});
				}
			};

			document.addEventListener("scroll", handleScroll, { passive: true });
			handleScroll();
		});
	}

	document.addEventListener("DOMContentLoaded", () => {
		const track = document.querySelector(".carousel-track-recomendations");
		const pauseBtn = document.getElementById("pauseBtn");

		if (!track || !pauseBtn) return;

		let isPaused = false;

		pauseBtn.addEventListener("click", () => {
			isPaused = !isPaused;
			track.style.animationPlayState = isPaused ? "paused" : "running";
			pauseBtn.textContent = isPaused ? "▶ Continuar" : "⏸ Pausar";
		});
	});
</script>